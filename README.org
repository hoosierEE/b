* b
  I want to understand what's going on over at kparc.com/b.
  Based on the docs, it appears to be full source code for a compiler for a C-like language.
  The compiler is implemented in Whitney-style C, an acquired taste.

  The readme claims that the generated code is on par with gcc/llvm at highest optimization settings, but with massively shorter compile times, and smaller binaries.

* download latest
  I used ~wget --recursive --no-parent http://kparc.com/b~ and then deleted a few spurious ~index.html?=~ files.

* make/install
  No ~k.c~ on my machine, so I will only try to ~make /bin/b~.

  - macos: lots of "function definition is not allowed here" errors.  Seems to have missed a macro somewhere (thinks ~R~ is a function definition but it's really a macro).
  - Ubuntu 16.04 vm (VirtualBox): builds ~b.c~ with some warnings

* the b executable
  - accepts ~*.b~ programs from the command line
  - does not permit spaces (repl exits)
  - no error handling (segfault)
  - function definitions work ~f[ii]{x+y}~
  - function call works ~f[2;3]~ returns 5
  - ~/~ and ~\~ do not seem to perform left or right shifts as hinted in the documentation (not sure what they do)

* impresions
  Weird.
  Feels like C and K at the same time.

* questions
  What is ~b~?
  Is it a compiler or a REPL (or both)?

* files
  ~b.c~ includes ~a.h~ includes ~c.h~

  - c.h:  typedefs, macros, accessors
  - a.h:  more accessors, public interface (lots of static inlined functions)
  - b.c:  entry point (~.start~ instead of ~main~ for some reason)
